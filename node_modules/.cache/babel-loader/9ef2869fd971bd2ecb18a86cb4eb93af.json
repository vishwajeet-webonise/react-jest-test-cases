{"ast":null,"code":"var _jsxFileName = \"/home/webonise/Desktop/react-assignment-store/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport ListToDoComponent from \"./ListToDoComponent\";\nimport AddToDoComponent from \"./AddToDoComponent\";\nimport { connect } from \"react-redux\";\nimport { saveTodoOnServer, deleteTodoFromServer, updateTodoOnServer, loadTodoFromServer } from \"./store/actions/todoAction\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.id = 1;\n\n    this.getDescription = event => {\n      this.setState({\n        description: event.target.value\n      });\n    };\n\n    this.updateTodo = todo => {\n      this.setState({\n        description: todo.desc,\n        updateItem: todo,\n        updateTodoState: true\n      });\n    };\n\n    this.addDescription = () => {\n      var desc = this.state.description;\n      this.props.addTodo(desc);\n    };\n\n    this.removeTodo = todo => {\n      this.props.deleteTodo(todo.id);\n    };\n\n    this.updatingTodoArray = () => {\n      var desc = this.state.description;\n      this.props.updateTodoForDispatch(this.state.updateItem.id, desc);\n    };\n\n    this.state = {\n      todoArray: [],\n      description: \"\",\n      updateItem: {},\n      updateTodoState: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.loadTodo();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(AddToDoComponent, {\n      getDescription: this.getDescription,\n      addDescription: this.addDescription,\n      description: this.state.description,\n      updatingTodoArray: this.updatingTodoArray,\n      updateTodoState: this.state.updateTodoState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(ListToDoComponent, {\n      todoList: this.props.todoArray,\n      removeTodo: this.removeTodo,\n      updateTodo: this.updateTodo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }));\n  }\n  /* to get data from text box*/\n\n\n}\n\nconst mapStateToProps = state => ({\n  todoArray: state.todoArray\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addTodo: text => dispatch(saveTodoOnServer(text)),\n  loadTodo: () => dispatch(loadTodoFromServer()),\n  deleteTodo: id => dispatch(deleteTodoFromServer()),\n  updateTodoForDispatch: (id, desc) => dispatch(updateTodoOnServer(id, desc))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/webonise/Desktop/react-assignment-store/src/App.js"],"names":["React","ListToDoComponent","AddToDoComponent","connect","saveTodoOnServer","deleteTodoFromServer","updateTodoOnServer","loadTodoFromServer","App","Component","constructor","props","id","getDescription","event","setState","description","target","value","updateTodo","todo","desc","updateItem","updateTodoState","addDescription","state","addTodo","removeTodo","deleteTodo","updatingTodoArray","updateTodoForDispatch","todoArray","componentDidMount","loadTodo","render","mapStateToProps","mapDispatchToProps","dispatch","text"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SACEC,gBADF,EAEEC,oBAFF,EAGEC,kBAHF,EAIEC,kBAJF,QAKO,4BALP;;AAOA,MAAMC,GAAN,SAAkBR,KAAK,CAACS,SAAxB,CAAkC;AAEhCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SADnBC,EACmB,GADd,CACc;;AAAA,SAgCnBC,cAhCmB,GAgCFC,KAAK,IAAI;AACxB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,WAAW,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAA5B,OAAd;AACD,KAlCkB;;AAAA,SAoCnBC,UApCmB,GAoCNC,IAAI,IAAI;AACnB,WAAKL,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAEI,IAAI,CAACC,IADN;AAEZC,QAAAA,UAAU,EAAEF,IAFA;AAGZG,QAAAA,eAAe,EAAE;AAHL,OAAd;AAKD,KA1CkB;;AAAA,SA8EnBC,cA9EmB,GA8EF,MAAM;AACrB,UAAIH,IAAI,GAAG,KAAKI,KAAL,CAAWT,WAAtB;AACA,WAAKL,KAAL,CAAWe,OAAX,CAAmBL,IAAnB;AACD,KAjFkB;;AAAA,SAmFnBM,UAnFmB,GAmFNP,IAAI,IAAI;AACnB,WAAKT,KAAL,CAAWiB,UAAX,CAAsBR,IAAI,CAACR,EAA3B;AACD,KArFkB;;AAAA,SAuFnBiB,iBAvFmB,GAuFC,MAAM;AACxB,UAAIR,IAAI,GAAG,KAAKI,KAAL,CAAWT,WAAtB;AACA,WAAKL,KAAL,CAAWmB,qBAAX,CAAiC,KAAKL,KAAL,CAAWH,UAAX,CAAsBV,EAAvD,EAA2DS,IAA3D;AACD,KA1FkB;;AAEjB,SAAKI,KAAL,GAAa;AACXM,MAAAA,SAAS,EAAE,EADA;AAEXf,MAAAA,WAAW,EAAE,EAFF;AAGXM,MAAAA,UAAU,EAAE,EAHD;AAIXC,MAAAA,eAAe,EAAE;AAJN,KAAb;AAMD;;AAEDS,EAAAA,iBAAiB,GAAG;AAClB,SAAKrB,KAAL,CAAWsB,QAAX;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AACE,MAAA,cAAc,EAAE,KAAKrB,cADvB;AAEE,MAAA,cAAc,EAAE,KAAKW,cAFvB;AAGE,MAAA,WAAW,EAAE,KAAKC,KAAL,CAAWT,WAH1B;AAIE,MAAA,iBAAiB,EAAE,KAAKa,iBAJ1B;AAKE,MAAA,eAAe,EAAE,KAAKJ,KAAL,CAAWF,eAL9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE,oBAAC,iBAAD;AACE,MAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAWoB,SADvB;AAEE,MAAA,UAAU,EAAE,KAAKJ,UAFnB;AAGE,MAAA,UAAU,EAAE,KAAKR,UAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADF;AAgBD;AACD;;;AAjCgC;;AA+FlC,MAAMgB,eAAe,GAAGV,KAAK,KAAK;AAChCM,EAAAA,SAAS,EAAEN,KAAK,CAACM;AADe,CAAL,CAA7B;;AAIA,MAAMK,kBAAkB,GAAGC,QAAQ,KAAK;AACtCX,EAAAA,OAAO,EAAEY,IAAI,IAAID,QAAQ,CAACjC,gBAAgB,CAACkC,IAAD,CAAjB,CADa;AAEtCL,EAAAA,QAAQ,EAAE,MAAMI,QAAQ,CAAC9B,kBAAkB,EAAnB,CAFc;AAGtCqB,EAAAA,UAAU,EAAEhB,EAAE,IAAIyB,QAAQ,CAAChC,oBAAoB,EAArB,CAHY;AAItCyB,EAAAA,qBAAqB,EAAE,CAAClB,EAAD,EAAKS,IAAL,KAAcgB,QAAQ,CAAC/B,kBAAkB,CAACM,EAAD,EAAKS,IAAL,CAAnB;AAJP,CAAL,CAAnC;;AAOA,eAAelB,OAAO,CACpBgC,eADoB,EAEpBC,kBAFoB,CAAP,CAGb5B,GAHa,CAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport ListToDoComponent from \"./ListToDoComponent\";\nimport AddToDoComponent from \"./AddToDoComponent\";\nimport { connect } from \"react-redux\";\n\nimport {\n  saveTodoOnServer,\n  deleteTodoFromServer,\n  updateTodoOnServer,\n  loadTodoFromServer\n} from \"./store/actions/todoAction\";\n\nclass App extends React.Component {\n  id = 1;\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoArray: [],\n      description: \"\",\n      updateItem: {},\n      updateTodoState: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.loadTodo();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <AddToDoComponent\n          getDescription={this.getDescription}\n          addDescription={this.addDescription}\n          description={this.state.description}\n          updatingTodoArray={this.updatingTodoArray}\n          updateTodoState={this.state.updateTodoState}\n        />\n        <ListToDoComponent\n          todoList={this.props.todoArray}\n          removeTodo={this.removeTodo}\n          updateTodo={this.updateTodo}\n        />\n      </div>\n    );\n  }\n  /* to get data from text box*/\n  getDescription = event => {\n    this.setState({ description: event.target.value });\n  };\n  /**To update the value from array at ListTodoComponent*/\n  updateTodo = todo => {\n    this.setState({\n      description: todo.desc,\n      updateItem: todo,\n      updateTodoState: true\n    });\n  };\n\n  /* to put data into array, props to AddToDoComponent\n  addDescription = () => {\n    var tempDescriptionObject = {\n      id: this.id++,\n      description: this.state.description\n    };\n    var tempTodoArray = [...this.state.todoArray, tempDescriptionObject];\n    this.setState({ todoArray: tempTodoArray, description: \"\" });\n  };*/\n\n  /*To remove item from array*/\n  /*removeTodo = todo => {\n    var tempRemoveArray = this.state.todoArray.filter(\n      removeTodoItem => removeTodoItem.id !== todo.id\n    );\n    this.setState({ todoArray: tempRemoveArray });\n  };*/\n\n  /**To update teh array with new value in AddToDoComponent \n  updatingTodoArray = () => {\n    var updateDescription = this.state\n      .description; \n\n    var indexOfTodoArray = this.state.todoArray.findIndex(\n      todo => todo.id === this.state.updateItem.id\n    );\n    /** Finding the array object to be updated\n\n    this.setState(prevstate => {\n      prevstate.todoArray[indexOfTodoArray].description = updateDescription;\n    });\n    this.setState({ updateTodoState: false, description: \"\" });\n  };*/\n\n  addDescription = () => {\n    var desc = this.state.description;\n    this.props.addTodo(desc);\n  };\n\n  removeTodo = todo => {\n    this.props.deleteTodo(todo.id);\n  };\n\n  updatingTodoArray = () => {\n    var desc = this.state.description;\n    this.props.updateTodoForDispatch(this.state.updateItem.id, desc);\n  };\n}\n\nconst mapStateToProps = state => ({\n  todoArray: state.todoArray\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addTodo: text => dispatch(saveTodoOnServer(text)),\n  loadTodo: () => dispatch(loadTodoFromServer()),\n  deleteTodo: id => dispatch(deleteTodoFromServer()),\n  updateTodoForDispatch: (id, desc) => dispatch(updateTodoOnServer(id, desc))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n"]},"metadata":{},"sourceType":"module"}